# Job Description to Markdown

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  # {:kino_vega_lite, "~> 0.1.1"},
  # {:kino_db, "~> 0.1.1"},
  {:req, github: "wojtekmach/req"},
  {:req_easyhtml, github: "wojtekmach/req_easyhtml"},
  {:floki, "~> 0.32"},
  {:pandex, "~> 0.2.0"}
])
```

## Summary

Using the excellent `req` library, we want to get the HTML of the job post url and convert the contents to markdown.

General specifications

1. Detect ATS system, one of `[breezyhr, greenhouse, lever, unknown]`
2. If `<temporary html file does not exist>:`
   1. Use `req` to download the full HTML page into `data/#{host}/#{hash}.html`.
3. If `<temporary html file exists>:`
   1. Ask to overwrite?
   2. Skip to next step (3).
4. Parse HTML into Markdown
   1. Pandoc
   2. Manually
   3. EasyHTML?
5. Add `[ ]` to every list item
   1. We do this specifically to help with a manual checklist.
   2. I would not apply to a position that had very few checked off.
   3. This list conversion has been almost 100% universal, to the point that this process should "be a thing."

## Code

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
url = Kino.Input.url("URL")
```

```elixir
defmodule Persistence do
  def get_path(url, extension \\ "html") do
    parts = URI.parse(url)
    hash = :crypto.hash(:sha, url) |> Base.encode16(case: :lower)
    {parts.host, "#{hash}.#{extension}"}
  end

  def save(path, contents, _overwrite \\ true) do
    {directory, filename} = path
    directory_path = Path.join([".", "data", "jobs", directory])
    file_path = Path.join(directory_path, filename)
    File.mkdir_p!(directory_path)
    io_device = File.open!(file_path, [:write, :binary, :utf8])
    :ok = IO.write(io_device, contents)
    :ok = File.close(io_device)
  end
end

url_value = Kino.Input.read(url)
{directory, filename} = Persistence.get_path(url_value)
```

```elixir
req_html = Req.new(http_errors: :raise)

html = Req.get!(req_html, url: url_value).body

Persistence.get_path(url_value)
|> Persistence.save(html)

{:ok, document} = Floki.parse_document(html)

description =
  Floki.find(document, ".breezy-portal .description")
  |> hd()
  |> Floki.children(include_text: false)
  |> Floki.traverse_and_update(fn
    {"li", attrs, [text]} -> {"li", attrs, ["[ ] " <> text]}
    tag -> tag
  end)
  |> Floki.raw_html()

{:ok, markdown} = Pandex.html_to_commonmark(description)

Persistence.get_path(url_value, "md")
|> Persistence.save(markdown)
```
